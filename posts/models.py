from django.db.models import Model, Manager, Index, PositiveSmallIntegerField, CharField, SlugField, BooleanField, TextField, ImageField, DateTimeField, ForeignKey, ManyToManyField
from django.db.models.signals import post_migrate, pre_delete
from django.db.models import SET_NULL, CASCADE
from django.dispatch import receiver
from django.urls import reverse

from users.models import User
from colorfield.fields import ColorField
from django_ckeditor_5.fields import CKEditor5Field
from django.utils.timezone import now
from app.settings import MEDIA_ROOT
import os


class PostType(Model):
    """
    –ú–æ–¥–µ–ª—å —Ç–∏–ø—ñ–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.
    """
    name = CharField('–ù–∞–∑–≤–∞', max_length=100, unique=True)
    name_plural = CharField('–ù–∞–∑–≤–∞ (–æ–¥–Ω–∏–Ω–∞)', max_length=100)
    slug = SlugField('Slug', max_length=200, unique=True)
    color = ColorField('–ö–æ–ª—ñ—Ä', format="hexa", default='#FF0000')
    description = CharField('–û–ø–∏—Å', max_length=300)
    created_date = DateTimeField('–î–∞—Ç–∞', default=now)

    class Meta():
        db_table = 'post_types'
        verbose_name = '–¢–∏–ø –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'
        verbose_name_plural = '–¢–∏–ø–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π'
        ordering = ['created_date']

    def __str__(self):
        return self.name_plural

    def get_absolute_url(self):
        return reverse('posts:index', kwargs={'type_slug': self.slug})


class PostTopic(Model):
    """
    –ú–æ–¥–µ–ª—å —Ä—É–±—Ä–∏–∫ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.
    """
    name = CharField('–ù–∞–∑–≤–∞', max_length=150, unique=True)
    slug = SlugField('Slug', max_length=200, unique=True)
    description = TextField('–û–ø–∏—Å', max_length=1000, blank=True, null=True)
    is_general = BooleanField('–ì–æ–ª–æ–≤–Ω–∞', default=False)
    created_date = DateTimeField('–î–∞—Ç–∞', default=now)

    class Meta():
        db_table = 'post_topics'
        verbose_name = '–†—É–±—Ä–∏–∫–∞'
        verbose_name_plural = '–†—É–±—Ä–∏–∫–∏'
        ordering = ['name']

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('posts:topic', args=[self.slug])


class PostTag(Model):
    """
    –ú–æ–¥–µ–ª—å —Ç–µ–≥—ñ–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.
    """
    name = CharField('–ù–∞–∑–≤–∞', max_length=150, unique=True)
    slug = SlugField('Slug', max_length=200, unique=True)
    description = TextField('–û–ø–∏—Å', max_length=1000, blank=True, null=True)
    created_date = DateTimeField('–î–∞—Ç–∞', default=now)

    class Meta():
        db_table = 'post_tags'
        verbose_name = '–¢–µ–≥'
        verbose_name_plural = '–¢–µ–≥–∏'
        ordering = ['name']

    def __str__(self):
        return self.name


class PostPublishedManager(Manager):
    """–£—Å—ñ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."""

    def get_queryset(self):
        return (super().get_queryset()
                .filter(is_publicated=True)
                .order_by('-created_date'))


class Post(Model):
    """
    –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∫–æ–ø–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    PUBLISH_STATUS = [
        (False, '–ß–µ—Ä–Ω–µ—Ç–∫–∞'),
        (True, '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'),
    ]
    user = ForeignKey(User, SET_NULL, related_name='posts', null=True,
                      blank=True, verbose_name='–ê–≤—Ç–æ—Ä')
    type = ForeignKey(PostType, SET_NULL, related_name='posts',
                      null=True, verbose_name='–¢–∏–ø')
    title = CharField('–ù–∞–∑–≤–∞', max_length=130, unique=True)
    slug = SlugField('Slug', max_length=150, unique=True,
                     unique_for_date='created_date')
    summary = CharField('–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å', max_length=200, default='')
    content = CKEditor5Field('–¢–µ–∫—Å—Ç', config_name='extends', max_length=50000)
    meta_description = CharField('SEO –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', max_length=400,
                                 blank=True, null=True)
    image = ImageField('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è', upload_to='images/posts_title')
    detail_image = ImageField('–§–æ–Ω', upload_to='images/posts_detail_image',
                              blank=True, null=True)
    topics = ManyToManyField(PostTopic, related_name='posts',
                             blank=True, verbose_name='–†—É–±—Ä–∏–∫–∏')
    tags = ManyToManyField(PostTag, related_name='posts',
                           blank=True, verbose_name='–¢–µ–≥–∏')
    is_publicated = BooleanField('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ', choices=PUBLISH_STATUS,
                                 default=True)
    is_edited = BooleanField('–ó–º—ñ–Ω–µ–Ω–æ', default=False)
    created_date = DateTimeField('–î–∞—Ç–∞', auto_now_add=True)
    edit_date = DateTimeField('–î–∞—Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', auto_now=True,
                              blank=True, null=True)
    likes = ManyToManyField(User, related_name='liked_posts',
                            blank=True, verbose_name='‚ûï –ü–ª—é—Å–∏')
    dislikes = ManyToManyField(User, related_name='disliked_posts',
                               blank=True, verbose_name='‚ûñ –ú—ñ–Ω—É—Å–∏')
    saves = ManyToManyField(User, related_name='saved_posts',
                            blank=True, verbose_name='–í –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö')
    review_pluses = CharField('–ü–ª—é—Å–∏', max_length=1000,
                              blank=True, null=True)
    review_minuses = CharField('–ú—ñ–Ω—É—Å–∏', max_length=1000,
                               blank=True, null=True)
    review_rating = PositiveSmallIntegerField('–†–µ–π—Ç–∏–Ω–≥ –æ–≥–ª—è–¥—É',
                                              blank=True, null=True)

    objects = Manager()
    published = PostPublishedManager()

    class Meta():
        db_table = 'posts'
        verbose_name = '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è'
        verbose_name_plural = 'üü© –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó'
        ordering = ['-created_date']
        indexes = [Index(fields=['-created_date', 'slug'])]

    def __str__(self):
        return self.title[0:30]

    def get_absolute_url(self):
        return reverse('posts:detail', args=[self.slug])

    def total_likes(self):
        return self.likes.count()


class PostCommentActiveManager(Manager):
    """–£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ."""

    def get_queryset(self):
        return (super().get_queryset()
                .filter(is_active=True)
                .order_by('-created_date'))


class PostComment(Model):
    """
    –ú–æ–¥–µ–ª—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.
    """
    post = ForeignKey(Post, CASCADE, related_name='comments',
                      null=True, blank=True, verbose_name='–ü–æ—Å—Ç')
    user = ForeignKey(User, CASCADE, related_name='comments',
                      verbose_name='–ê–≤—Ç–æ—Ä')
    parent = ForeignKey('self', SET_NULL, related_name='childrens',
                        blank=True, null=True, verbose_name="–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞")
    text = CKEditor5Field('–¢–µ–∫—Å—Ç', config_name='comments', max_length=1000)
    is_edited = BooleanField('–ó–º—ñ–Ω–µ–Ω–æ', default=False)
    created_date = DateTimeField('–î–∞—Ç–∞', auto_now_add=True)
    edit_date = DateTimeField('–î–∞—Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', auto_now=True,
                              blank=True, null=True)
    is_active = BooleanField('–ê–∫—Ç–∏–≤–Ω–∏–π', default=True)

    objects = Manager()
    active = PostCommentActiveManager()

    class Meta():
        db_table = 'comments'
        verbose_name = '–ö–æ–º–µ–Ω—Ç–∞—Ä'
        verbose_name_plural = '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ'
        ordering = ['-created_date']
        indexes = [Index(fields=['-created_date'])]

    def __str__(self):
        return f'({self.user.username}) {self.text[0:22]}'

    def get_absolute_url(self):
        return f"{reverse('posts:detail', args=[self.post.slug])}#comment-{self.id}"


@receiver(pre_delete, sender=Post)
def delete_post(sender, instance: Post, **kwargs):
    instance.tags.clear()
    instance.topics.clear()
    instance.likes.clear()
    instance.dislikes.clear()
    instance.saves.clear()

    if instance.image:
        image_path = MEDIA_ROOT / instance.image.path
        if os.path.exists(image_path):
            os.remove(image_path)


@receiver(post_migrate)
def create_default_post_type_and_topic(sender, **kwargs):
    if not PostType.objects.exists():
        PostType.objects.create(
            name='–ù–æ–≤–∏–Ω–∏',
            name_plural='–ù–æ–≤–∏–Ω–∞',
            slug='news',
            description='–ù–æ–≤–∏–Ω–∏ –∑—ñ —Å–≤—ñ—Ç—É –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä —Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π',
        )

    if not PostTopic.objects.exists():
        PostTopic.objects.create(
            name='–Ü–≥—Ä–æ–≤–∞ —ñ–Ω–¥—É—Å—Ç—Ä—ñ—è',
            slug='igrova-industriya',
            description="–£—Å—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —É—Å—ñ—î—é —ñ–≥—Ä–æ–≤–æ—é —ñ–Ω–¥—É—Å—Ç—Ä—ñ—î—é",
        )


# class PostTopicRelation(Model):
#     post = ForeignKey(Post, CASCADE)
#     topic = ForeignKey(PostTopic, CASCADE)

#     class Meta:
#         db_table = 'posts_topics'

# class PostTagRelation(Model):
#     post = ForeignKey(Post, CASCADE)
#     tag = ForeignKey(PostTag, CASCADE)

#     class Meta:
#         db_table = 'posts_tags'
